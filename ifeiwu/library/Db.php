<?php
namespace ifeiwu; use ifeiwu\Exception; use ifeiwu\db\statement\Select; use ifeiwu\db\statement\Insert; use ifeiwu\db\statement\Update; use ifeiwu\db\statement\Delete; use ifeiwu\db\statement\Query; class Db extends \PDO { private $prefix; private $debug; private $logs = array(); private static $_instance; public static function getInstance($config = array()) { if (!(self::$_instance instanceof self)) { self::$_instance = new self($config); } return self::$_instance; } public function __construct($config) { $config = array_merge(Config::get('db'), $config); $this->prefix = $config['prefix']; $this->debug = $config['debug']; try { $options = array( \PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8', \PDO::ATTR_DEFAULT_FETCH_MODE => \PDO::FETCH_ASSOC, \PDO::ATTR_EMULATE_PREPARES => false, \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION, \PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true ); parent::__construct('mysql:dbname=' . $config['name'] . ';host=' . $config['host'] . ';charset=utf8', $config['user'], $config['pass'], $options); } catch (\PDOException $e) { throw new Exception($e); } } public function select($table, $column = '*') { return new Select($this, $this->prefix . $table, $column); } public function insert($table, $data) { return new Insert($this, $this->prefix . $table, $data); } public function update($table, $data, $wheres = false) { return new Update($this, $this->prefix . $table, $data, $wheres); } public function delete($table, $wheres = false) { return new Delete($this, $this->prefix . $table, $wheres); } public function query($sql, $values = array()) { return new Query($this, $sql, $values); } public function id() { return $this->lastInsertId(); } public function last() { return end($this->logs); } public function log() { return $this->logs; } public function setLog($sql) { $this->logs[] = $sql; } public function getDebug() { return $this->debug; } public function getPrefix() { return $this->prefix; } }