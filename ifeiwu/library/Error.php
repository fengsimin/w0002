<?php
namespace ifeiwu; use ifeiwu\Log; class Error { public static function register() { ini_set('error_reporting', E_ALL & ~E_NOTICE); ini_set('display_errors', 'off'); ini_set('html_errors', 'off'); $level = error_reporting(); error_reporting(0); set_error_handler(array(__CLASS__, 'appError'), $level); set_exception_handler(array(__CLASS__, 'appException')); register_shutdown_function(array(__CLASS__, 'appShutdown')); } public static function appError($errno, $errstr, $errfile, $errline, $errcontext) { $crash = array( 'type' => 'Runtime Error', 'level' => $errno, 'message' => $errstr, 'file' => $errfile, 'line' => $errline, 'trace' => $errcontext, ); $log = Log::getInstance(); $log->setAdapter('file'); $log->error($crash); } public static function appException($ex) { $crash = array( 'type' => get_class($ex), 'level' => $ex->getCode(), 'message' => $ex->getMessage(), 'file' => $ex->getFile(), 'line' => $ex->getLine(), 'trace' => explode("\n", trim($ex->getTraceAsString(), "\r\n")), ); $log = Log::getInstance(); $log->setAdapter('file'); $log->error($crash); } public static function appShutdown() { if (is_null($error = error_get_last())) { return; } if (in_array($error['type'], array(E_ERROR, E_CORE_ERROR, E_COMPILE_ERROR, E_PARSE))) { $crash = array( 'type' => 'Fatal Error', 'level' => $error['type'], 'message' => $error['message'], 'file' => $error['file'], 'line' => $error['line'], 'trace' => debug_backtrace() ); $log = Log::getInstance(); $log->setAdapter('file'); $log->error($crash); } } } 