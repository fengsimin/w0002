<?php
namespace ifeiwu; class Router { public static function register() { $routes = Config::get('route'); $request = Request::getInstance(); $response = Response::getInstance(); $baseurl = '/' . trim(substr($request->baseUrl(), strlen($request->root())), '/'); $method = $request->method(); foreach ($routes as $pattern => $route) { $methods = explode('|', $route['method']); if (!in_array($method, $methods) && !in_array('*', $methods)) { continue; } if (preg_match_all('#^' . $pattern . '$#', $baseurl, $matches, PREG_OFFSET_CAPTURE)) { $matches = array_slice($matches, 1); $params = array_map(function($match, $index) use ($matches) { if (isset($matches[$index + 1]) && isset($matches[$index + 1][0]) && is_array($matches[$index + 1][0])) { return trim(substr($match[0][0], 0, $matches[$index + 1][0][1] - $match[0][1]), '/'); } else { return (isset($match[0][0]) ? trim($match[0][0], '/') : null); } }, $matches, array_keys($matches)); $controller = $route['controller']; $request->controller($controller); $action = $route['action']; $request->action($action); $class = '\\controller\\' . $controller; $controller = new $class($request, $response); if (method_exists($controller, '_init')) { $controller->_init($request, $response); } if (method_exists($controller, $action)) { $params[] = $request; $params[] = $response; call_user_func_array(array($controller, $action), $params); } else { call_user_func(array(new \controller\Error($request), 'index'), 'Method not found'); } } } if (!$class) { call_user_func(array(new \controller\Error($request), 'index'), 'Route not found'); } } } 