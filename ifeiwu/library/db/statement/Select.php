<?php
namespace ifeiwu\db\statement; use ifeiwu\Exception; use ifeiwu\db\StatementAbstract; class Select extends StatementAbstract { public function __construct($db, $table, $column = '*') { $this->db = $db; if (is_array($column)) { $this->sql = 'SELECT ' . implode(', ', $column); } else { $this->sql = 'SELECT ' . $column; } $this->sql .= ' FROM ' . $table; } public function order($order) { if (is_array($order)) { $this->sql .= ' ORDER BY ' . implode(', ', $order); } else { $this->sql .= ' ORDER BY ' . $order; } return $this; } public function group($group) { if (is_array($group)) { $this->sql .= ' GROUP BY ' . implode(', ', $group); } else { $this->sql .= ' GROUP BY ' . $group; } return $this; } public function limit($limit) { if (is_array($limit)) { $this->sql .= ' LIMIT ' . implode(', ', $limit); } else { $this->sql .= ' LIMIT ' . $limit; } return $this; } public function get($num = null) { if (!is_null($num)) { return $this->run()->fetchColumn($num); } else { return $this->run()->fetch(); } } public function all() { return $this->run()->fetchAll(); } public function has() { return $this->run()->fetch() ? true : false; } public function count() { $this->sql = preg_replace('/^SELECT.+[FROM]{4}/', 'SELECT COUNT(*) FROM', $this->sql); return $this->run()->fetchColumn(0); } public function run() { if ($this->db->getDebug() == true) { $this->db->setLog($this->debug()); } $stmt = $this->db->prepare($this->sql); $stmt->execute($this->values); return $stmt; } } 