<?php
namespace ifeiwu\db; abstract class StatementAbstract { protected $db; protected $stmt; protected $sql; protected $values = array(); public function where($wheres, $values = array()) { $this->sql .= ' WHERE '; if (is_string($wheres)) { $this->sql .= $wheres; if ($values) { $this->values = $values; } } else { if (!is_array($wheres[0])) { $wheres = array(array($wheres)); } elseif (!is_array($wheres[0][0])) { $wheres = array($wheres); } foreach ($wheres as $where) { if (is_array($where)) { $this->sql .= '('; foreach ($where as $compose) { if (is_array($compose)) { list($name, $symbol, $value) = $compose; $symbol = strtoupper($symbol); $this->sql .= $name . ' ' . $symbol; switch ($symbol) { case 'IN': $value = is_array($value) ? $value : array($value); $this->sql .= ' (' . rtrim(str_repeat('?,', count($value)), ',') . ')'; $this->values = array_merge($this->values, $value); break; default: $this->sql .= ' ?'; $this->values[] = $value; break; } } else { $compose = strtoupper($compose); if ($compose == 'OR' || $compose == 'AND') { $this->sql .= ' ' . $compose . ' '; } else { $this->sql .= $compose; } } } $this->sql .= ')'; } else { $this->sql .= ' ' . strtoupper($where) . ' '; } } } return $this; } public function sql() { if ($this->run() !== false) { return $this->debug(); } else { return false; } } public function debug() { $sql = $this->sql; if ($this->values) { if (stripos($sql, '?') !== false) { $sql = str_replace('(?)', "(".'%s'.")", $sql); $sql = str_replace('?', "'".'%s'."'", $sql); } else { $sql = preg_replace('/:{1}[A-Za-z0-9_-]+/i', "'".'%s'."'", $sql); } $sql = vsprintf($sql, $this->values); } return $sql; } } 