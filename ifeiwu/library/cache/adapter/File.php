<?php
namespace ifeiwu\cache\adapter; use ifeiwu\cache\AdapterAbstract; use ifeiwu\Config; class File extends AdapterAbstract { protected $option; public function __construct($config) { $this->option = $config; $this->setPath($this->option['path']); } public function get($key) { if ($this->has($key)) { $value = file_get_contents($this->_filename($key)); return unserialize(gzuncompress(base64_decode($value))); } return false; } public function set($key, $value, $expire) { $value = base64_encode(gzcompress(serialize($value))); file_put_contents($this->_filename($key), $value); } public function has($key) { $expire = $this->option['expire']; $filename = $this->_filename($key); if(file_exists($filename)) { return ($expire == 0 || (filemtime($filename) + $expire >= time())) ? : false; } return false; } public function delete($key) { return unlink($this->_filename($key)); } public function clear() { return $this->_cleared($this->path); } public function setOption($key, $value) { switch ($key) { case 'path': $this->setPath($value); break; case 'dir': $this->setDir($value); break; case 'prefix': $this->option['prefix'] = $value; break; } } protected function setPath($path) { if ($path != '') { if (!is_dir($path)) { if (!mkdir($path, 0755, true)) { throw new \Exception('Can\'t create directory'); } } $this->option['path'] = $path; } } protected function setDir($dirname) { $this->setPath($this->option['path'] . $dirname); } private function _cleared($path) { if (!is_dir($path)) { return false; } if ($handle = opendir($path)) { while (false !== ($item = readdir($handle))) { if ($item != '.' && $item != '..') { if (is_dir("$path/$item")) { $this->_cleared("$path/$item"); } else { unlink("$path/$item"); } } } closedir($handle); if (rmdir($path)) { return true; } else { return false; } } } private function _filename($key) { $key = preg_replace('/[^0-9a-z\.\_\-]/i', '', strtolower($this->_key($key))); return $this->option['path'] . $key . '.cache'; } } 